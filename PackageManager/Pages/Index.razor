@page "/"
@using MudBlazor
@using PackageManager.Logic.Computer
@using PackageManager.Logic.Demonstration
@using PackageManager.Logic.ExecuteStrategy
@using PackageManager.Data
@using PackageManager.Logic.PackageBuilder

<MudContainer Class="mt-4" MaxWidth="MaxWidth.ExtraExtraLarge">

    <MudGrid Class="align-end">
        <MudItem xs="2">
            <MudTextField @bind-Value="@Constants.TaskCount" Label="Количество задач в пакете" />
        </MudItem>
        <MudItem xs="2">
            <MudButton OnClick="@StartCompareAlgorithms" Color="@Color.Success" Class="add-item-btn">Запустить расчет</MudButton>
        </MudItem>
        <MudItem xs="6"></MudItem>
    </MudGrid>

    <MudDivider DividerType="DividerType.Middle" Class="my-6" />

    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Анализ зависимости КПД системы от типа операций и их относительного количества в пакете</MudText>
    <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">(X - относительное количество операций в пакете; Y - КПД системы)</MudText>
    <MudGrid Class="align-end mt-10">
        @foreach (var report in KpdExecuteStatistic)
        {
            <MudItem xs="4">
                <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">@report.Key</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@GetKpdSeries(report.Value)" XAxisLabels="@XAxisLabelsKpd" Width="100%" Height="350px" ChartOptions="@OptionsKpd" />
            </MudItem>
        }
    </MudGrid>

    <MudDivider DividerType="DividerType.Middle" Class="my-6" />
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Сравнение количества операций в зависимости от алгоритма, типа операций и выделенного кванта времени</MudText>
    <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">(X - Алгоритмы (+ квант); Y - Количество операций; Столбцы - типы операций)</MudText>
    <MudGrid Class="align-end mt-10">
        @foreach (var report in OperationsExecuteStatistic)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">@report.Key</MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@GetOperationsSeries(report.Value)" XAxisLabels="@XAxisLabelsOperations" Width="100%" Height="350px" ChartOptions="@OptionsOperations" />
            </MudItem>
        }
    </MudGrid>

</MudContainer>


@code
{
    private static string[] colorsRGB = { Colors.Blue.Accent3, Colors.Red.Accent3, Colors.Green.Accent3 };
    private string[] XAxisLabelsKpd = { "10", "20", "30", "40", "50", "60", "70", "80", "90", "100" };
    private string[] XAxisLabelsOperations = { "Queue", "NoWaitQueue", "RR(1)", "RR(2)", "RR(3)", "RR(4)", "RR(5)", "RR(10)", "RR(15)", "RR(20)" };

    private ChartOptions OptionsKpd = new ChartOptions()
        {
            LineStrokeWidth = 1,
            YAxisTicks = 100,
            ChartPalette = colorsRGB,
        };
    private ChartOptions OptionsOperations = new ChartOptions()
        {
            ChartPalette = colorsRGB,
        };

    private IDictionary<string, List<ExecuteStatistic>> OperationsExecuteStatistic = new Dictionary<string, List<ExecuteStatistic>>();

    private IDictionary<string, Dictionary<string, List<ExecuteStatistic>>> KpdExecuteStatistic = new Dictionary<string, Dictionary<string, List<ExecuteStatistic>>>();

    private void StartCompareAlgorithms()
    {
        KpdExecuteStatistic = Demo.GetDataCompareAlgorithmsByTaskTypes();
        OperationsExecuteStatistic = Demo.GetDataCompareAlgorithmsByCompletedticksByTaskTypes();
    }

    private List<ChartSeries> GetOperationsSeries(List<ExecuteStatistic> data)
    {
        List<ChartSeries> series = new List<ChartSeries>();
        ChartSeries pendingSeries = new ChartSeries() { Name = "Ожидание", Data = new double[data.Count] };
        ChartSeries executeSeries = new ChartSeries() { Name = "Выполнение", Data = new double[data.Count] };
        ChartSeries switchSeries = new ChartSeries() { Name = "Смена задач", Data = new double[data.Count] };

        for (int i = 0; i < data.Count; i++)
        {
            pendingSeries.Data[i] = (double)data[i].CompletedTicksOnPending;
            executeSeries.Data[i] = (double)data[i].CompletedTicksOnExecute;
            switchSeries.Data[i] = (double)data[i].TicksOnSwitch;
        }

        return new List<ChartSeries>() {
            pendingSeries, executeSeries, switchSeries
        };
    }

    private List<ChartSeries> GetKpdSeries(Dictionary<string, List<ExecuteStatistic>> data)
    {
        List<ChartSeries> series = new List<ChartSeries>();

        foreach (var d in data)
        {
            series.Add(new ChartSeries()
                {
                    Name = d.Key,
                    Data = ExecuteStatisticUsefulWorkListToDoubleArray(d.Value)
                });
        }
        return series;
    }

    private double[] ExecuteStatisticUsefulWorkListToDoubleArray(List<ExecuteStatistic> list)
    {
        double[] array = new double[list.Count];
        for (int i = 0; i < list.Count; i++)
        {
            array[i] = (double)(list[i].UsefulWork) * 100;
        }
        return array;
    }
}